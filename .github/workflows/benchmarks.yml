name: Benchmarks

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'benchmarks/**'
      - 'engines/statevector/**'
      - 'core/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'benchmarks/**'
      - 'engines/statevector/**'
      - 'core/**'
  workflow_dispatch:
    inputs:
      qubits:
        description: 'Number of qubits for benchmark'
        required: false
        default: '20'
      gates:
        description: 'Number of gates for benchmark'
        required: false
        default: '1024'

jobs:
  parallel-speedup:
    name: StateVector Parallel Speedup
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 24
      uses: actions/setup-java@v4
      with:
        java-version: '24'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      
    - name: Set CPU governor to performance
      run: |
        echo "Setting CPU governor to performance for stable benchmarks"
        sudo cpupower frequency-set --governor performance || echo "cpupower not available, continuing..."
        
    - name: Run StateVector parallel benchmark
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # Use custom parameters from workflow dispatch
          ./gradlew :benchmarks:javaexec \
            --args="-f 1 -wi 5 -i 10 -rf JSON -rff build/reports/jmh/statevector-parallel.json -p qubits=${{ github.event.inputs.qubits }} -p gates=${{ github.event.inputs.gates }} .*StateVectorParallelBenchmark.*" \
            -PjmhMainClass=org.openjdk.jmh.Main
        else
          # Use CI-optimized parameters
          ./gradlew :benchmarks:jmhCI
        fi
        
    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip
        # No additional dependencies needed - using standard library only
        
    - name: Analyze benchmark results
      run: |
        cd benchmarks
        python3 scripts/speedup.py \
          ../build/reports/jmh/statevector-parallel.json \
          --output reports/parallel-speedup.md \
          --min-speedup 2.8
          
    - name: Create reports directory
      run: mkdir -p benchmarks/reports
      
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: statevector-parallel-results
        path: |
          build/reports/jmh/statevector-parallel.json
          benchmarks/reports/parallel-speedup.md
        retention-days: 30
        
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = 'benchmarks/reports/parallel-speedup.md';
          
          if (fs.existsSync(path)) {
            const report = fs.readFileSync(path, 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🚀 StateVector Parallel Benchmark Results\n\n${report}`
            });
          }
          
    - name: Add to job summary
      if: always()
      run: |
        echo "## StateVector Parallel Benchmark Results" >> $GITHUB_STEP_SUMMARY
        if [ -f benchmarks/reports/parallel-speedup.md ]; then
          cat benchmarks/reports/parallel-speedup.md >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Benchmark report not generated" >> $GITHUB_STEP_SUMMARY
        fi

  benchmark-validation:
    name: Validate Benchmark Implementation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 24
      uses: actions/setup-java@v4
      with:
        java-version: '24'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      
    - name: Compile benchmarks
      run: ./gradlew :benchmarks:compileJava :benchmarks:jmhCompileGeneratedClasses
      
    - name: Run quick validation benchmark
      run: |
        ./gradlew :benchmarks:javaexec \
          --args="-f 1 -wi 1 -i 1 -rf JSON -rff build/reports/jmh/validation.json -p qubits=10 -p gates=64 .*StateVectorParallelBenchmark.*" \
          -PjmhMainClass=org.openjdk.jmh.Main
          
    - name: Validate results structure
      run: |
        python3 -c "
        import json
        with open('build/reports/jmh/validation.json', 'r') as f:
            data = json.load(f)
        print(f'Found {len(data)} benchmark results')
        for result in data:
            params = result['params']
            print(f'  qubits={params[\"qubits\"]}, gates={params[\"gates\"]}, parallel={params[\"parallel\"]}')
        assert len(data) >= 2, 'Expected at least 2 results (parallel=true/false)'
        print('✅ Benchmark validation passed')
        "